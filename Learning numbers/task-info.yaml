type: remote_edu
files:
- name: main.go
  visible: true
  text: "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\t\
    fmt.Println(\"Hello! My name is Aid.\")\n\tfmt.Println(\"I was created in 2020.\"\
    )\n\tfmt.Println(\"Please, remind me your name.\")\n\n\tvar name string\n\tfmt.Scan(&name)\n\
    \n\tfmt.Println(\"What a great name you have, \" + name + \"!\")\n\tfmt.Println(\"\
    Let me guess your age.\")\n\tfmt.Println(\"Enter remainders of dividing your age\
    \ by 3, 5 and 7.\")\n\n\tvar rem3, rem5, rem7, age int\n\tfmt.Scan(&rem3, &rem5,\
    \ &rem7)\n\n\tage = (rem3*70 + rem5*21 + rem7*15) % 105\n\n\tfmt.Println(\"Your\
    \ age is \" + strconv.Itoa(age) + \"; that's a good time to start programming!\"\
    )\n\tfmt.Println(\"Now I will prove to you that I can count to any number you\
    \ want.\")\n\n\t// read a number and count to it here\n\n\tfmt.Println(\"Completed,\
    \ have a nice day!\")\n}\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class ChattyBotTest(StageTest):
        def generate(self) -> List[TestCase]:
            return [
                TestCase(stdin="Marry\n1\n0\n5\n10", attach=("Marry", 40, 10))
            ]

        def check(self, reply: str, clue: Any) -> CheckResult:
            lines = reply.strip().splitlines()
            length = 9 + clue[2] + 1
            if len(lines) != length:
                return CheckResult.wrong(
                    f"You should output {length} lines " +
                    f"(for the count number {clue[2]}).\n" +
                    f"Lines found: {len(lines)}\n"
                    f"Your output:\n"
                    f"{reply.strip()}"
                )

            line_with_name = lines[3].lower()
            name = clue[0].lower()

            if name not in line_with_name:
                return CheckResult.wrong(
                    "The name was " + clue[0] + "\n" +
                    "But the 4-th line was:\n" +
                    "\"" + lines[3] + "\"\n\n" +
                    "4-th line should contain a name of the user"
                )

            line_with_age = lines[6].lower()
            age = str(clue[1])

            if age not in line_with_age:
                return CheckResult.wrong(
                    "Can't find a correct age " +
                    "in the last line of output! " +
                    "Maybe you calculated the age wrong?\n\n" +
                    "Your last line: \n" + "\"" + lines[6] + "\""
                )

            for i in range(clue[2] + 1):
                num_line = lines[i + 8].strip().replace(' ', '')
                actual_num = f'{i}!'

                if num_line != actual_num:
                    return CheckResult.wrong(
                        f"Expected {i + 8}-th line: \n" +
                        f"\"{actual_num}\"\n" +
                        f"Your {i + 8}-th line: \n" +
                        f"\"{num_line}\""
                    )

            return CheckResult.correct()


    if __name__ == '__main__':
        ChattyBotTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/206/stages/1030/implement#comment
check_profile: hyperskill_go
status: Solved
feedback:
  message: <html>Correct solution</html>
  time: "Thu, 26 Jan 2023 00:41:47 UTC"
record: 4
